"use strict";function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};var ownKeys=Object.keys(source);if(typeof Object.getOwnPropertySymbols==="function"){ownKeys=ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym){return Object.getOwnPropertyDescriptor(source,sym).enumerable}))}ownKeys.forEach(function(key){_defineProperty(target,key,source[key])})}return target}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}/*
 * Based on glossarizer https://github.com/PebbleRoad/glossarizer
 */var defaultOptions={replaceTag:"abbr"/* Matching words will be wrapped with abbr tags by default */,lookupTagName:"p, li, em"/* Lookup in either paragraphs or lists. Do not replace in headings ('p, ul, a, div') */,callback:null/* Callback once all tags are replaced: Call or tooltip or anything you like */,replaceOnce:true/* Replace only once in a TextNode */,replaceClass:"glossary_replaced",caseSensitive:false,exactMatch:false};function getTerms(glossary){return glossary.reduce(function(acc,entry){var terms=entry.term.split(",");terms.forEach(function(term){var trimmed=term.replace(/^\s+|\s+$/g,"");var isExclusion=trimmed.charAt(0)==="!";if(isExclusion){acc.excludes.push(trimmed.substr(1))}else{acc.terms.push(trimmed)}});return acc},{terms:[],excludes:[]})}function applyTerms(targetEl,glossary){var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var config={el:targetEl,options:Object.assign({},defaultOptions,options),replaced:[],regexOption:(defaultOptions.caseSensitive?"":"i")+(defaultOptions.replaceOnce?"":"g"),glossary:glossary};wrapTerms(_objectSpread({},config,getTerms(glossary)));if(config.options.callback){config.options.callback.apply(null,[config.el])}}function wrapTerms(config){config.cleanedTerms=clean(config.terms.join("|"));config.excludedTerms=clean(config.excludes.join("|"));var nodes=config.el.querySelectorAll(config.options.lookupTagName);nodes.forEach(function(node){traverser(config,node)})}/**
 * Traverses through nodes to find the matching terms in TEXTNODES
 */function traverser(config,node){var termsRegex=new RegExp("(?:^|\\b)("+config.cleanedTerms+")(?!\\w)",config.regexOption);var exclusionsRegex=new RegExp("(?:^|\\b)("+config.excludedTerms+")(?!\\w)",config.regexOption);var next;if(node.nodeType===1){// Element Node
if(node=node.firstChild){do{// Recursively call traverseChildNodes
// on each child node
next=node.nextSibling;// Check if the node is not glossarized
if(node.className!==config.options.replaceClass){traverser(config,node)}}while(node=next)}}else if(node.nodeType===3){// Text Node
var tempNode=document.createElement("div");var data=node.data;if(termsRegex.test(data)){var exclusions=exclusionsRegex.exec(data);data=data.replace(termsRegex,function(match,item,offset){if(config.options.replaceOnce&&inArrayIn(match,config.replaced)>=0){return match}config.replaced.push(match);var ir=new RegExp("(?:^|\\b)"+clean(match)+"(?!\\w)");var result=ir.exec(data);if(result){if(exclusions&&config.excludes.length){var id=offset;var exclusionIndex=exclusions.index;var maxExclusion=exclusions.index+exclusions[0].length;if(exclusionIndex<=id&&id<=maxExclusion){return match}return createTag(match)}return createTag(match)}});/**
       * Only replace when a match is found
       */tempNode.innerHTML=data;while(tempNode.firstChild){node.parentNode.insertBefore(tempNode.firstChild,node)}node.parentNode.removeChild(node)}}function createTag(match){var entry=getEntry(config,match);if(!entry)return;var description=truncate(entry.description.replace(/"/gi,"&quot;"),300);return"<".concat(config.options.replaceTag," class=\"").concat(config.options.replaceClass,"\" title=\"").concat(description,"\" data-id=\"").concat(entry.id,"\">").concat(match,"</").concat(config.options.replaceTag,">")}}function getEntry(config,term){var cleanTerm=clean(term);/**
   * Matches
   * 1. Starts with \s* (zero or more spaces)
   * 2. Ends with zero or more spaces
   * 3. Ends with comma
   */var termRegex=new RegExp("(,|s*)"+cleanTerm+"\\s*|\\,$","i");for(var i=0;i<config.glossary.length;i++){if(config.options.exactMatch){if(config.glossary[i].term===cleanTerm){return config.glossary[i]}}else if(config.glossary[i].term.match(termRegex)){return config.glossary[i]}}}var RE_ESCAPE=new RegExp("(\\"+["/",".","*","+","?","(",")","[","]","{","}","\\"].join("|\\")+")","g");function clean(text){return text.replace(RE_ESCAPE,"\\$1")}function inArrayIn(elem,array,i){if(typeof elem!=="string"){return array.indexOf(elem)}if(array){var len=array.length;i=i?i<0?Math.max(0,len+i):i:0;elem=elem.toLowerCase();for(;i<len;i++){if(i in array&&array[i].toLowerCase()===elem){return i}}}return-1}function addTerms(textSelector,terms){document.querySelectorAll(textSelector).forEach(function(text){applyTerms(text,terms,{callback:applyTooltips})})}function truncate(string,n){return string.length>n?string.substr(0,n-3)+"&hellip;":string}var kebabRegex=/ (?<!^)([A-Z][a-z]|(?<=[a-z])[A-Z])/g;function kebabCase(string){return string.replace(kebabRegex,"-$1").trim().toLowerCase()}function applyTooltips(element){element.querySelectorAll(".".concat(defaultOptions.replaceClass)).forEach(function(node){var termId=node.getAttribute("data-id");var description=node.title.replace(/\n/g,"<br>");var content="<div><h3 class=\"tippy-heading\">".concat(termId,"</h3><p class=\"tippy-definition\">").concat(description,"</p><a class=\"tippy-link\" href=\"/muster/docs/glossary.html#").concat(kebabCase(termId),"\">View glossary</a></div>");tippy(node,{arrow:true,allowHTML:true,content:content,performance:true,size:"large",theme:"light",interactive:true,interactiveBorder:true,interactiveDebounce:30})})}if(!window.location.pathname.includes("glossary")){fetch("/muster/js/glossary.json").then(function(response){return response.json()}).then(function(glossaryTerms){window.addEventListener("load",function(){addTerms(".post",glossaryTerms.terms)})})}
